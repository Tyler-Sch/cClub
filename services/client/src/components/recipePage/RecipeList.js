import React, { useContext, useState, useEffect } from 'react';
import protectedFetch from '../helpers';
import Dropdown from '../standardComps/Dropdown';
import { UserContext } from '../stores/UserStore';
import MenuList from './menuList';
import Recipes from './Recipes';


export default function RecipeList(props) {

  const [newListName, setNewListName] = useState('');
  const [lenRecipeList, setLenRecipeList] = useState(null);

  const {
    userRecipes,
    setUserRecipes,
    fetchRecipeLists,
    userRecipeList,
    userUrlPrefix,
    loggedIn,
    savedRecipes,
    setSavedRecipes,
    targetList,
    setTargetList } = useContext(UserContext);

  // when target list changes, render that new list
  useEffect(() => {
    if (targetList !== null) {
      setSavedRecipes(userRecipeList[targetList].recipes)
    }
  }, [targetList])

  useEffect(() => {
    document.querySelector("#main").style.minHeight = '4000px';
  })

  // when new list is created, put new list in target in focus
  useEffect(() => {
    if (lenRecipeList === null && userRecipeList.length >= 0) {
      setLenRecipeList(userRecipeList.length);
    }
    else if (userRecipeList.length > lenRecipeList) {
      setTargetList(0);
      setLenRecipeList(userRecipeList.length);
      setSavedRecipes([]); // this could cause bugs since the blank list
                           // is being generated by javascript and not the
                           // server
    }
  }, [userRecipeList])

  // add a new recipe list
  const createRecipeList = async (e) => {
    e.preventDefault();
    const recipeData = userRecipes;
    const data = {
      recipeListName: newListName,
      recipes: {}
    }
    const url = userUrlPrefix + 'users/create-new-recipe-list';
    const responseData = await protectedFetch(url, 'POST', data);
    setNewListName('');
    fetchRecipeLists();
  }

  // save unsaved recipes to database
  const saveRecipeList = async () => {
    const data = {
        'targetListId': userRecipeList[targetList].listId[0],
        'recipes': userRecipes
    }
    const url = userUrlPrefix + 'users/add-recipes-to-list';
    const response = await protectedFetch(url, 'POST', data);
    if (response.status === 'success') {
        setSavedRecipes([...userRecipes, ...savedRecipes]);
        setUserRecipes([]);
        // fetching all the recipe lists is ineffcient, but hey,
        // we dont want to do premature optimization, right???
        fetchRecipeLists();
    }
    else {
        console.log('error in saveRecipeList in RecipeList');
    }
  }

  // delete saved recipe from database
  const removeSavedRecipe = async (id) => {
    const url = userUrlPrefix + 'users/remove-recipe';
    const data = {
      'targetList': userRecipeList[targetList].listId[0],
      'targetRecipe': id
    }
    const response = await protectedFetch(url, 'POST', data);
    if (response.status === 'success') {
      setSavedRecipes(response.updatedRecipes);
      fetchRecipeLists();
    }
    else {
      console.log("there was an error in removeSavedRecipe in RecipeList")
    }
  }

  // remove unsaved item from recipe list
  const removeElement = (id) => {
    setUserRecipes(userRecipes.filter((i) => i.id !== id));
  }

  // should come up with a better way of centering info.
  // currently it's in an h1 tag which feel oh so wrong
  return (
    <div className="section">
      <MenuList submit={createRecipeList}
                change={(e) => setNewListName(e.target.value)}
                val={newListName}
                userRecipeL={userRecipeList}
                setTargetList={setTargetList}
      />
      <h1 className="has-text-centered">
        {!loggedIn &&
        <span className="tag is-warning ">please log in to save recipes</span>
        }
        <h1 className="title">{
            (targetList !== null)
            ? userRecipeList[targetList].listName
            : 'Recipes'}
        </h1>

      <ul>
        <Recipes
          listItems={userRecipes}
          classColor={'has-text-grey'}
          onClickFunction={removeElement}
        />
        <Recipes
          listItems={savedRecipes}
          classColor={'has-text-dark'}
          onClickFunction={removeSavedRecipe}
        />
      </ul>

      {
        userRecipes.length > 0 && loggedIn &&
        <button onClick={() => saveRecipeList()} className="button is-dark is-small is-hover">Save recipe list</button>
      }
    </h1>
    </div>
  )
}
